// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: rotation_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BannerRotationServiceClient is the client API for BannerRotationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerRotationServiceClient interface {
	// API for banners
	AddBannerToSlot(ctx context.Context, in *AddBannerToSlotRequest, opts ...grpc.CallOption) (*AddBannerToSlotResponse, error)
	DeleteBannerFromSlot(ctx context.Context, in *DeleteBannerFromSlotRequest, opts ...grpc.CallOption) (*DeleteBannerFromSlotResponse, error)
	AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error)
	DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResponse, error)
	// API for slots
	AddSlot(ctx context.Context, in *AddSlotRequest, opts ...grpc.CallOption) (*AddSlotResponse, error)
	DeleteSlot(ctx context.Context, in *DeleteSlotRequest, opts ...grpc.CallOption) (*DeleteSlotResponse, error)
	// API for groups
	AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	// API for rotation
	PersistClick(ctx context.Context, in *PersistClickRequest, opts ...grpc.CallOption) (*PersistClickResponse, error)
	NextBanner(ctx context.Context, in *NextBannerRequest, opts ...grpc.CallOption) (*NextBannerResponse, error)
}

type bannerRotationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerRotationServiceClient(cc grpc.ClientConnInterface) BannerRotationServiceClient {
	return &bannerRotationServiceClient{cc}
}

func (c *bannerRotationServiceClient) AddBannerToSlot(ctx context.Context, in *AddBannerToSlotRequest, opts ...grpc.CallOption) (*AddBannerToSlotResponse, error) {
	out := new(AddBannerToSlotResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotationService/AddBannerToSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) DeleteBannerFromSlot(ctx context.Context, in *DeleteBannerFromSlotRequest, opts ...grpc.CallOption) (*DeleteBannerFromSlotResponse, error) {
	out := new(DeleteBannerFromSlotResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotationService/DeleteBannerFromSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error) {
	out := new(AddBannerResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotationService/AddBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResponse, error) {
	out := new(DeleteBannerResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotationService/DeleteBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) AddSlot(ctx context.Context, in *AddSlotRequest, opts ...grpc.CallOption) (*AddSlotResponse, error) {
	out := new(AddSlotResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotationService/AddSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) DeleteSlot(ctx context.Context, in *DeleteSlotRequest, opts ...grpc.CallOption) (*DeleteSlotResponse, error) {
	out := new(DeleteSlotResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotationService/DeleteSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error) {
	out := new(AddGroupResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotationService/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotationService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) PersistClick(ctx context.Context, in *PersistClickRequest, opts ...grpc.CallOption) (*PersistClickResponse, error) {
	out := new(PersistClickResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotationService/PersistClick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) NextBanner(ctx context.Context, in *NextBannerRequest, opts ...grpc.CallOption) (*NextBannerResponse, error) {
	out := new(NextBannerResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotationService/NextBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerRotationServiceServer is the server API for BannerRotationService service.
// All implementations must embed UnimplementedBannerRotationServiceServer
// for forward compatibility
type BannerRotationServiceServer interface {
	// API for banners
	AddBannerToSlot(context.Context, *AddBannerToSlotRequest) (*AddBannerToSlotResponse, error)
	DeleteBannerFromSlot(context.Context, *DeleteBannerFromSlotRequest) (*DeleteBannerFromSlotResponse, error)
	AddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResponse, error)
	// API for slots
	AddSlot(context.Context, *AddSlotRequest) (*AddSlotResponse, error)
	DeleteSlot(context.Context, *DeleteSlotRequest) (*DeleteSlotResponse, error)
	// API for groups
	AddGroup(context.Context, *AddGroupRequest) (*AddGroupResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	// API for rotation
	PersistClick(context.Context, *PersistClickRequest) (*PersistClickResponse, error)
	NextBanner(context.Context, *NextBannerRequest) (*NextBannerResponse, error)
	mustEmbedUnimplementedBannerRotationServiceServer()
}

// UnimplementedBannerRotationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBannerRotationServiceServer struct {
}

func (UnimplementedBannerRotationServiceServer) AddBannerToSlot(context.Context, *AddBannerToSlotRequest) (*AddBannerToSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBannerToSlot not implemented")
}
func (UnimplementedBannerRotationServiceServer) DeleteBannerFromSlot(context.Context, *DeleteBannerFromSlotRequest) (*DeleteBannerFromSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBannerFromSlot not implemented")
}
func (UnimplementedBannerRotationServiceServer) AddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedBannerRotationServiceServer) DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedBannerRotationServiceServer) AddSlot(context.Context, *AddSlotRequest) (*AddSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSlot not implemented")
}
func (UnimplementedBannerRotationServiceServer) DeleteSlot(context.Context, *DeleteSlotRequest) (*DeleteSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSlot not implemented")
}
func (UnimplementedBannerRotationServiceServer) AddGroup(context.Context, *AddGroupRequest) (*AddGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (UnimplementedBannerRotationServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedBannerRotationServiceServer) PersistClick(context.Context, *PersistClickRequest) (*PersistClickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersistClick not implemented")
}
func (UnimplementedBannerRotationServiceServer) NextBanner(context.Context, *NextBannerRequest) (*NextBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextBanner not implemented")
}
func (UnimplementedBannerRotationServiceServer) mustEmbedUnimplementedBannerRotationServiceServer() {}

// UnsafeBannerRotationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerRotationServiceServer will
// result in compilation errors.
type UnsafeBannerRotationServiceServer interface {
	mustEmbedUnimplementedBannerRotationServiceServer()
}

func RegisterBannerRotationServiceServer(s grpc.ServiceRegistrar, srv BannerRotationServiceServer) {
	s.RegisterService(&BannerRotationService_ServiceDesc, srv)
}

func _BannerRotationService_AddBannerToSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerToSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).AddBannerToSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotationService/AddBannerToSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).AddBannerToSlot(ctx, req.(*AddBannerToSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_DeleteBannerFromSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerFromSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).DeleteBannerFromSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotationService/DeleteBannerFromSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).DeleteBannerFromSlot(ctx, req.(*DeleteBannerFromSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotationService/AddBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).AddBanner(ctx, req.(*AddBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotationService/DeleteBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).DeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_AddSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).AddSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotationService/AddSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).AddSlot(ctx, req.(*AddSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_DeleteSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).DeleteSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotationService/DeleteSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).DeleteSlot(ctx, req.(*DeleteSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotationService/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).AddGroup(ctx, req.(*AddGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotationService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_PersistClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).PersistClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotationService/PersistClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).PersistClick(ctx, req.(*PersistClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_NextBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).NextBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotationService/NextBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).NextBanner(ctx, req.(*NextBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BannerRotationService_ServiceDesc is the grpc.ServiceDesc for BannerRotationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannerRotationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banner_rotation.BannerRotationService",
	HandlerType: (*BannerRotationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBannerToSlot",
			Handler:    _BannerRotationService_AddBannerToSlot_Handler,
		},
		{
			MethodName: "DeleteBannerFromSlot",
			Handler:    _BannerRotationService_DeleteBannerFromSlot_Handler,
		},
		{
			MethodName: "AddBanner",
			Handler:    _BannerRotationService_AddBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _BannerRotationService_DeleteBanner_Handler,
		},
		{
			MethodName: "AddSlot",
			Handler:    _BannerRotationService_AddSlot_Handler,
		},
		{
			MethodName: "DeleteSlot",
			Handler:    _BannerRotationService_DeleteSlot_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _BannerRotationService_AddGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _BannerRotationService_DeleteGroup_Handler,
		},
		{
			MethodName: "PersistClick",
			Handler:    _BannerRotationService_PersistClick_Handler,
		},
		{
			MethodName: "NextBanner",
			Handler:    _BannerRotationService_NextBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rotation_service.proto",
}
