// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kristina71/otus_project/internal/services (interfaces: Repository,EventsPublisher)

// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	stats "github.com/kristina71/otus_project/internal/stats"
	storage "github.com/kristina71/otus_project/internal/storage"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddBanner mocks base method.
func (m *MockRepository) AddBanner(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBanner", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBanner indicates an expected call of AddBanner.
func (mr *MockRepositoryMockRecorder) AddBanner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBanner", reflect.TypeOf((*MockRepository)(nil).AddBanner), arg0, arg1)
}

// AddBannerToSlot mocks base method.
func (m *MockRepository) AddBannerToSlot(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBannerToSlot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBannerToSlot indicates an expected call of AddBannerToSlot.
func (mr *MockRepositoryMockRecorder) AddBannerToSlot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBannerToSlot", reflect.TypeOf((*MockRepository)(nil).AddBannerToSlot), arg0, arg1, arg2)
}

// AddGroup mocks base method.
func (m *MockRepository) AddGroup(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroup", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGroup indicates an expected call of AddGroup.
func (mr *MockRepositoryMockRecorder) AddGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroup", reflect.TypeOf((*MockRepository)(nil).AddGroup), arg0, arg1)
}

// AddSlot mocks base method.
func (m *MockRepository) AddSlot(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSlot", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSlot indicates an expected call of AddSlot.
func (mr *MockRepositoryMockRecorder) AddSlot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlot", reflect.TypeOf((*MockRepository)(nil).AddSlot), arg0, arg1)
}

// DeleteBanner mocks base method.
func (m *MockRepository) DeleteBanner(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockRepositoryMockRecorder) DeleteBanner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockRepository)(nil).DeleteBanner), arg0, arg1)
}

// DeleteBannerFromSlot mocks base method.
func (m *MockRepository) DeleteBannerFromSlot(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBannerFromSlot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBannerFromSlot indicates an expected call of DeleteBannerFromSlot.
func (mr *MockRepositoryMockRecorder) DeleteBannerFromSlot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBannerFromSlot", reflect.TypeOf((*MockRepository)(nil).DeleteBannerFromSlot), arg0, arg1, arg2)
}

// DeleteGroup mocks base method.
func (m *MockRepository) DeleteGroup(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockRepositoryMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockRepository)(nil).DeleteGroup), arg0, arg1)
}

// DeleteSlot mocks base method.
func (m *MockRepository) DeleteSlot(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSlot indicates an expected call of DeleteSlot.
func (mr *MockRepositoryMockRecorder) DeleteSlot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlot", reflect.TypeOf((*MockRepository)(nil).DeleteSlot), arg0, arg1)
}

// FindSlotBannerStats mocks base method.
func (m *MockRepository) FindSlotBannerStats(arg0 context.Context, arg1, arg2 string) ([]storage.SlotBannerStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSlotBannerStats", arg0, arg1, arg2)
	ret0, _ := ret[0].([]storage.SlotBannerStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSlotBannerStats indicates an expected call of FindSlotBannerStats.
func (mr *MockRepositoryMockRecorder) FindSlotBannerStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSlotBannerStats", reflect.TypeOf((*MockRepository)(nil).FindSlotBannerStats), arg0, arg1, arg2)
}

// GetBannerByID mocks base method.
func (m *MockRepository) GetBannerByID(arg0 context.Context, arg1 string) (storage.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannerByID", arg0, arg1)
	ret0, _ := ret[0].(storage.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannerByID indicates an expected call of GetBannerByID.
func (mr *MockRepositoryMockRecorder) GetBannerByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannerByID", reflect.TypeOf((*MockRepository)(nil).GetBannerByID), arg0, arg1)
}

// GetGroupByID mocks base method.
func (m *MockRepository) GetGroupByID(arg0 context.Context, arg1 string) (storage.SocialGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByID", arg0, arg1)
	ret0, _ := ret[0].(storage.SocialGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByID indicates an expected call of GetGroupByID.
func (mr *MockRepositoryMockRecorder) GetGroupByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByID", reflect.TypeOf((*MockRepository)(nil).GetGroupByID), arg0, arg1)
}

// GetSlotByID mocks base method.
func (m *MockRepository) GetSlotByID(arg0 context.Context, arg1 string) (storage.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotByID", arg0, arg1)
	ret0, _ := ret[0].(storage.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlotByID indicates an expected call of GetSlotByID.
func (mr *MockRepositoryMockRecorder) GetSlotByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotByID", reflect.TypeOf((*MockRepository)(nil).GetSlotByID), arg0, arg1)
}

// PersistClick mocks base method.
func (m *MockRepository) PersistClick(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistClick", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistClick indicates an expected call of PersistClick.
func (mr *MockRepositoryMockRecorder) PersistClick(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistClick", reflect.TypeOf((*MockRepository)(nil).PersistClick), arg0, arg1, arg2, arg3)
}

// PersistShow mocks base method.
func (m *MockRepository) PersistShow(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistShow", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistShow indicates an expected call of PersistShow.
func (mr *MockRepositoryMockRecorder) PersistShow(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistShow", reflect.TypeOf((*MockRepository)(nil).PersistShow), arg0, arg1, arg2, arg3)
}

// MockEventsPublisher is a mock of EventsPublisher interface.
type MockEventsPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockEventsPublisherMockRecorder
}

// MockEventsPublisherMockRecorder is the mock recorder for MockEventsPublisher.
type MockEventsPublisherMockRecorder struct {
	mock *MockEventsPublisher
}

// NewMockEventsPublisher creates a new mock instance.
func NewMockEventsPublisher(ctrl *gomock.Controller) *MockEventsPublisher {
	mock := &MockEventsPublisher{ctrl: ctrl}
	mock.recorder = &MockEventsPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsPublisher) EXPECT() *MockEventsPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockEventsPublisher) Publish(arg0 stats.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockEventsPublisherMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventsPublisher)(nil).Publish), arg0)
}
